// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EntryProtocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "EntryProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace alibaba {
namespace otter {
namespace canal {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* Entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* Header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_reflection_ = NULL;
const ::google::protobuf::Descriptor* Column_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Column_reflection_ = NULL;
const ::google::protobuf::Descriptor* RowData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RowData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RowChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RowChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionBegin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionBegin_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pair_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EntryType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EventType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_EntryProtocol_2eproto() {
  protobuf_AddDesc_EntryProtocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "EntryProtocol.proto");
  GOOGLE_CHECK(file != NULL);
  Entry_descriptor_ = file->message_type(0);
  static const int Entry_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, entrytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, storevalue_),
  };
  Entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Entry_descriptor_,
      Entry::default_instance_,
      Entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Entry));
  Header_descriptor_ = file->message_type(1);
  static const int Header_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, logfilename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, logfileoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, serverencode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, executetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, sourcetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, schemaname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, tablename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, eventlength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, eventtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, props_),
  };
  Header_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Header_descriptor_,
      Header::default_instance_,
      Header_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Header));
  Column_descriptor_ = file->message_type(2);
  static const int Column_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, sqltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, iskey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, updated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, isnull_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, props_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, mysqltype_),
  };
  Column_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Column_descriptor_,
      Column::default_instance_,
      Column_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Column));
  RowData_descriptor_ = file->message_type(3);
  static const int RowData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowData, beforecolumns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowData, aftercolumns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowData, props_),
  };
  RowData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RowData_descriptor_,
      RowData::default_instance_,
      RowData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RowData));
  RowChange_descriptor_ = file->message_type(4);
  static const int RowChange_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowChange, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowChange, eventtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowChange, isddl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowChange, sql_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowChange, rowdatas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowChange, props_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowChange, ddlschemaname_),
  };
  RowChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RowChange_descriptor_,
      RowChange::default_instance_,
      RowChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RowChange));
  TransactionBegin_descriptor_ = file->message_type(5);
  static const int TransactionBegin_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionBegin, executetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionBegin, transactionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionBegin, props_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionBegin, threadid_),
  };
  TransactionBegin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransactionBegin_descriptor_,
      TransactionBegin::default_instance_,
      TransactionBegin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionBegin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionBegin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransactionBegin));
  TransactionEnd_descriptor_ = file->message_type(6);
  static const int TransactionEnd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionEnd, executetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionEnd, transactionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionEnd, props_),
  };
  TransactionEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransactionEnd_descriptor_,
      TransactionEnd::default_instance_,
      TransactionEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransactionEnd));
  Pair_descriptor_ = file->message_type(7);
  static const int Pair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pair, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pair, value_),
  };
  Pair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pair_descriptor_,
      Pair::default_instance_,
      Pair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pair));
  EntryType_descriptor_ = file->enum_type(0);
  EventType_descriptor_ = file->enum_type(1);
  Type_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_EntryProtocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Entry_descriptor_, &Entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Header_descriptor_, &Header::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Column_descriptor_, &Column::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RowData_descriptor_, &RowData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RowChange_descriptor_, &RowChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransactionBegin_descriptor_, &TransactionBegin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransactionEnd_descriptor_, &TransactionEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pair_descriptor_, &Pair::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_EntryProtocol_2eproto() {
  delete Entry::default_instance_;
  delete Entry_reflection_;
  delete Header::default_instance_;
  delete Header_reflection_;
  delete Column::default_instance_;
  delete Column_reflection_;
  delete RowData::default_instance_;
  delete RowData_reflection_;
  delete RowChange::default_instance_;
  delete RowChange_reflection_;
  delete TransactionBegin::default_instance_;
  delete TransactionBegin_reflection_;
  delete TransactionEnd::default_instance_;
  delete TransactionEnd_reflection_;
  delete Pair::default_instance_;
  delete Pair_reflection_;
}

void protobuf_AddDesc_EntryProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023EntryProtocol.proto\022 com.alibaba.otter"
    ".canal.protocol\"\236\001\n\005Entry\0228\n\006header\030\001 \001("
    "\0132(.com.alibaba.otter.canal.protocol.Hea"
    "der\022G\n\tentryType\030\002 \001(\0162+.com.alibaba.ott"
    "er.canal.protocol.EntryType:\007ROWDATA\022\022\n\n"
    "storeValue\030\003 \001(\014\"\203\003\n\006Header\022\022\n\007version\030\001"
    " \001(\005:\0011\022\023\n\013logfileName\030\002 \001(\t\022\025\n\rlogfileO"
    "ffset\030\003 \001(\003\022\020\n\010serverId\030\004 \001(\003\022\024\n\014servere"
    "nCode\030\005 \001(\t\022\023\n\013executeTime\030\006 \001(\003\022A\n\nsour"
    "ceType\030\007 \001(\0162&.com.alibaba.otter.canal.p"
    "rotocol.Type:\005MYSQL\022\022\n\nschemaName\030\010 \001(\t\022"
    "\021\n\ttableName\030\t \001(\t\022\023\n\013eventLength\030\n \001(\003\022"
    "F\n\teventType\030\013 \001(\0162+.com.alibaba.otter.c"
    "anal.protocol.EventType:\006UPDATE\0225\n\005props"
    "\030\014 \003(\0132&.com.alibaba.otter.canal.protoco"
    "l.Pair\"\326\001\n\006Column\022\r\n\005index\030\001 \001(\005\022\017\n\007sqlT"
    "ype\030\002 \001(\005\022\014\n\004name\030\003 \001(\t\022\r\n\005isKey\030\004 \001(\010\022\017"
    "\n\007updated\030\005 \001(\010\022\025\n\006isNull\030\006 \001(\010:\005false\0225"
    "\n\005props\030\007 \003(\0132&.com.alibaba.otter.canal."
    "protocol.Pair\022\r\n\005value\030\010 \001(\t\022\016\n\006length\030\t"
    " \001(\005\022\021\n\tmysqlType\030\n \001(\t\"\301\001\n\007RowData\022\?\n\rb"
    "eforeColumns\030\001 \003(\0132(.com.alibaba.otter.c"
    "anal.protocol.Column\022>\n\014afterColumns\030\002 \003"
    "(\0132(.com.alibaba.otter.canal.protocol.Co"
    "lumn\0225\n\005props\030\003 \003(\0132&.com.alibaba.otter."
    "canal.protocol.Pair\"\222\002\n\tRowChange\022\017\n\007tab"
    "leId\030\001 \001(\003\022F\n\teventType\030\002 \001(\0162+.com.alib"
    "aba.otter.canal.protocol.EventType:\006UPDA"
    "TE\022\024\n\005isDdl\030\n \001(\010:\005false\022\013\n\003sql\030\013 \001(\t\022;\n"
    "\010rowDatas\030\014 \003(\0132).com.alibaba.otter.cana"
    "l.protocol.RowData\0225\n\005props\030\r \003(\0132&.com."
    "alibaba.otter.canal.protocol.Pair\022\025\n\rddl"
    "SchemaName\030\016 \001(\t\"\207\001\n\020TransactionBegin\022\023\n"
    "\013executeTime\030\001 \001(\003\022\025\n\rtransactionId\030\002 \001("
    "\t\0225\n\005props\030\003 \003(\0132&.com.alibaba.otter.can"
    "al.protocol.Pair\022\020\n\010threadId\030\004 \001(\003\"s\n\016Tr"
    "ansactionEnd\022\023\n\013executeTime\030\001 \001(\003\022\025\n\rtra"
    "nsactionId\030\002 \001(\t\0225\n\005props\030\003 \003(\0132&.com.al"
    "ibaba.otter.canal.protocol.Pair\"\"\n\004Pair\022"
    "\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t*Q\n\tEntryType"
    "\022\024\n\020TRANSACTIONBEGIN\020\001\022\013\n\007ROWDATA\020\002\022\022\n\016T"
    "RANSACTIONEND\020\003\022\r\n\tHEARTBEAT\020\004*\216\001\n\tEvent"
    "Type\022\n\n\006INSERT\020\001\022\n\n\006UPDATE\020\002\022\n\n\006DELETE\020\003"
    "\022\n\n\006CREATE\020\004\022\t\n\005ALTER\020\005\022\t\n\005ERASE\020\006\022\t\n\005QU"
    "ERY\020\007\022\014\n\010TRUNCATE\020\010\022\n\n\006RENAME\020\t\022\n\n\006CINDE"
    "X\020\n\022\n\n\006DINDEX\020\013*(\n\004Type\022\n\n\006ORACLE\020\001\022\t\n\005M"
    "YSQL\020\002\022\t\n\005PGSQL\020\003B0\n com.alibaba.otter.c"
    "anal.protocolB\nCanalEntryH\001", 1907);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "EntryProtocol.proto", &protobuf_RegisterTypes);
  Entry::default_instance_ = new Entry();
  Header::default_instance_ = new Header();
  Column::default_instance_ = new Column();
  RowData::default_instance_ = new RowData();
  RowChange::default_instance_ = new RowChange();
  TransactionBegin::default_instance_ = new TransactionBegin();
  TransactionEnd::default_instance_ = new TransactionEnd();
  Pair::default_instance_ = new Pair();
  Entry::default_instance_->InitAsDefaultInstance();
  Header::default_instance_->InitAsDefaultInstance();
  Column::default_instance_->InitAsDefaultInstance();
  RowData::default_instance_->InitAsDefaultInstance();
  RowChange::default_instance_->InitAsDefaultInstance();
  TransactionBegin::default_instance_->InitAsDefaultInstance();
  TransactionEnd::default_instance_->InitAsDefaultInstance();
  Pair::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_EntryProtocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_EntryProtocol_2eproto {
  StaticDescriptorInitializer_EntryProtocol_2eproto() {
    protobuf_AddDesc_EntryProtocol_2eproto();
  }
} static_descriptor_initializer_EntryProtocol_2eproto_;
const ::google::protobuf::EnumDescriptor* EntryType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntryType_descriptor_;
}
bool EntryType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventType_descriptor_;
}
bool EventType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Type_descriptor_;
}
bool Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Entry::kHeaderFieldNumber;
const int Entry::kEntryTypeFieldNumber;
const int Entry::kStoreValueFieldNumber;
#endif  // !_MSC_VER

Entry::Entry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Entry::InitAsDefaultInstance() {
  header_ = const_cast< ::com::alibaba::otter::canal::protocol::Header*>(&::com::alibaba::otter::canal::protocol::Header::default_instance());
}

Entry::Entry(const Entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Entry::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  entrytype_ = 2;
  storevalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Entry::~Entry() {
  SharedDtor();
}

void Entry::SharedDtor() {
  if (storevalue_ != &::google::protobuf::internal::kEmptyString) {
    delete storevalue_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

void Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Entry_descriptor_;
}

const Entry& Entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EntryProtocol_2eproto();
  return *default_instance_;
}

Entry* Entry::default_instance_ = NULL;

Entry* Entry::New() const {
  return new Entry;
}

void Entry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::com::alibaba::otter::canal::protocol::Header::Clear();
    }
    entrytype_ = 2;
    if (has_storevalue()) {
      if (storevalue_ != &::google::protobuf::internal::kEmptyString) {
        storevalue_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.alibaba.otter.canal.protocol.Header header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_entryType;
        break;
      }

      // optional .com.alibaba.otter.canal.protocol.EntryType entryType = 2 [default = ROWDATA];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entryType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::alibaba::otter::canal::protocol::EntryType_IsValid(value)) {
            set_entrytype(static_cast< ::com::alibaba::otter::canal::protocol::EntryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_storeValue;
        break;
      }

      // optional bytes storeValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storeValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_storevalue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.alibaba.otter.canal.protocol.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional .com.alibaba.otter.canal.protocol.EntryType entryType = 2 [default = ROWDATA];
  if (has_entrytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->entrytype(), output);
  }

  // optional bytes storeValue = 3;
  if (has_storevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->storevalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.alibaba.otter.canal.protocol.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional .com.alibaba.otter.canal.protocol.EntryType entryType = 2 [default = ROWDATA];
  if (has_entrytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->entrytype(), target);
  }

  // optional bytes storeValue = 3;
  if (has_storevalue()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->storevalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.alibaba.otter.canal.protocol.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .com.alibaba.otter.canal.protocol.EntryType entryType = 2 [default = ROWDATA];
    if (has_entrytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->entrytype());
    }

    // optional bytes storeValue = 3;
    if (has_storevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->storevalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Entry::MergeFrom(const Entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::com::alibaba::otter::canal::protocol::Header::MergeFrom(from.header());
    }
    if (from.has_entrytype()) {
      set_entrytype(from.entrytype());
    }
    if (from.has_storevalue()) {
      set_storevalue(from.storevalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entry::CopyFrom(const Entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entry::IsInitialized() const {

  return true;
}

void Entry::Swap(Entry* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(entrytype_, other->entrytype_);
    std::swap(storevalue_, other->storevalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Entry_descriptor_;
  metadata.reflection = Entry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Header::kVersionFieldNumber;
const int Header::kLogfileNameFieldNumber;
const int Header::kLogfileOffsetFieldNumber;
const int Header::kServerIdFieldNumber;
const int Header::kServerenCodeFieldNumber;
const int Header::kExecuteTimeFieldNumber;
const int Header::kSourceTypeFieldNumber;
const int Header::kSchemaNameFieldNumber;
const int Header::kTableNameFieldNumber;
const int Header::kEventLengthFieldNumber;
const int Header::kEventTypeFieldNumber;
const int Header::kPropsFieldNumber;
#endif  // !_MSC_VER

Header::Header()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Header::InitAsDefaultInstance() {
}

Header::Header(const Header& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Header::SharedCtor() {
  _cached_size_ = 0;
  version_ = 1;
  logfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  logfileoffset_ = GOOGLE_LONGLONG(0);
  serverid_ = GOOGLE_LONGLONG(0);
  serverencode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  executetime_ = GOOGLE_LONGLONG(0);
  sourcetype_ = 2;
  schemaname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  eventlength_ = GOOGLE_LONGLONG(0);
  eventtype_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Header::~Header() {
  SharedDtor();
}

void Header::SharedDtor() {
  if (logfilename_ != &::google::protobuf::internal::kEmptyString) {
    delete logfilename_;
  }
  if (serverencode_ != &::google::protobuf::internal::kEmptyString) {
    delete serverencode_;
  }
  if (schemaname_ != &::google::protobuf::internal::kEmptyString) {
    delete schemaname_;
  }
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (this != default_instance_) {
  }
}

void Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_descriptor_;
}

const Header& Header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EntryProtocol_2eproto();
  return *default_instance_;
}

Header* Header::default_instance_ = NULL;

Header* Header::New() const {
  return new Header;
}

void Header::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 1;
    if (has_logfilename()) {
      if (logfilename_ != &::google::protobuf::internal::kEmptyString) {
        logfilename_->clear();
      }
    }
    logfileoffset_ = GOOGLE_LONGLONG(0);
    serverid_ = GOOGLE_LONGLONG(0);
    if (has_serverencode()) {
      if (serverencode_ != &::google::protobuf::internal::kEmptyString) {
        serverencode_->clear();
      }
    }
    executetime_ = GOOGLE_LONGLONG(0);
    sourcetype_ = 2;
    if (has_schemaname()) {
      if (schemaname_ != &::google::protobuf::internal::kEmptyString) {
        schemaname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_tablename()) {
      if (tablename_ != &::google::protobuf::internal::kEmptyString) {
        tablename_->clear();
      }
    }
    eventlength_ = GOOGLE_LONGLONG(0);
    eventtype_ = 2;
  }
  props_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 1 [default = 1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_logfileName;
        break;
      }

      // optional string logfileName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logfileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logfilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->logfilename().data(), this->logfilename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_logfileOffset;
        break;
      }

      // optional int64 logfileOffset = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logfileOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &logfileoffset_)));
          set_has_logfileoffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_serverId;
        break;
      }

      // optional int64 serverId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_serverenCode;
        break;
      }

      // optional string serverenCode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serverenCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverencode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->serverencode().data(), this->serverencode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_executeTime;
        break;
      }

      // optional int64 executeTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_executeTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &executetime_)));
          set_has_executetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sourceType;
        break;
      }

      // optional .com.alibaba.otter.canal.protocol.Type sourceType = 7 [default = MYSQL];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sourceType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::alibaba::otter::canal::protocol::Type_IsValid(value)) {
            set_sourcetype(static_cast< ::com::alibaba::otter::canal::protocol::Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_schemaName;
        break;
      }

      // optional string schemaName = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_schemaName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_schemaname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->schemaname().data(), this->schemaname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_tableName;
        break;
      }

      // optional string tableName = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tableName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tablename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tablename().data(), this->tablename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_eventLength;
        break;
      }

      // optional int64 eventLength = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eventLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &eventlength_)));
          set_has_eventlength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_eventType;
        break;
      }

      // optional .com.alibaba.otter.canal.protocol.EventType eventType = 11 [default = UPDATE];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eventType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::alibaba::otter::canal::protocol::EventType_IsValid(value)) {
            set_eventtype(static_cast< ::com::alibaba::otter::canal::protocol::EventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_props;
        break;
      }

      // repeated .com.alibaba.otter.canal.protocol.Pair props = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_props:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_props()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_props;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 version = 1 [default = 1];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // optional string logfileName = 2;
  if (has_logfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logfilename().data(), this->logfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->logfilename(), output);
  }

  // optional int64 logfileOffset = 3;
  if (has_logfileoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->logfileoffset(), output);
  }

  // optional int64 serverId = 4;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->serverid(), output);
  }

  // optional string serverenCode = 5;
  if (has_serverencode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serverencode().data(), this->serverencode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->serverencode(), output);
  }

  // optional int64 executeTime = 6;
  if (has_executetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->executetime(), output);
  }

  // optional .com.alibaba.otter.canal.protocol.Type sourceType = 7 [default = MYSQL];
  if (has_sourcetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->sourcetype(), output);
  }

  // optional string schemaName = 8;
  if (has_schemaname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->schemaname().data(), this->schemaname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->schemaname(), output);
  }

  // optional string tableName = 9;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->tablename(), output);
  }

  // optional int64 eventLength = 10;
  if (has_eventlength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->eventlength(), output);
  }

  // optional .com.alibaba.otter.canal.protocol.EventType eventType = 11 [default = UPDATE];
  if (has_eventtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->eventtype(), output);
  }

  // repeated .com.alibaba.otter.canal.protocol.Pair props = 12;
  for (int i = 0; i < this->props_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->props(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Header::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 version = 1 [default = 1];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // optional string logfileName = 2;
  if (has_logfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logfilename().data(), this->logfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->logfilename(), target);
  }

  // optional int64 logfileOffset = 3;
  if (has_logfileoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->logfileoffset(), target);
  }

  // optional int64 serverId = 4;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->serverid(), target);
  }

  // optional string serverenCode = 5;
  if (has_serverencode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serverencode().data(), this->serverencode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->serverencode(), target);
  }

  // optional int64 executeTime = 6;
  if (has_executetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->executetime(), target);
  }

  // optional .com.alibaba.otter.canal.protocol.Type sourceType = 7 [default = MYSQL];
  if (has_sourcetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->sourcetype(), target);
  }

  // optional string schemaName = 8;
  if (has_schemaname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->schemaname().data(), this->schemaname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->schemaname(), target);
  }

  // optional string tableName = 9;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->tablename(), target);
  }

  // optional int64 eventLength = 10;
  if (has_eventlength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->eventlength(), target);
  }

  // optional .com.alibaba.otter.canal.protocol.EventType eventType = 11 [default = UPDATE];
  if (has_eventtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->eventtype(), target);
  }

  // repeated .com.alibaba.otter.canal.protocol.Pair props = 12;
  for (int i = 0; i < this->props_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->props(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Header::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 version = 1 [default = 1];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional string logfileName = 2;
    if (has_logfilename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logfilename());
    }

    // optional int64 logfileOffset = 3;
    if (has_logfileoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->logfileoffset());
    }

    // optional int64 serverId = 4;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->serverid());
    }

    // optional string serverenCode = 5;
    if (has_serverencode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverencode());
    }

    // optional int64 executeTime = 6;
    if (has_executetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->executetime());
    }

    // optional .com.alibaba.otter.canal.protocol.Type sourceType = 7 [default = MYSQL];
    if (has_sourcetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sourcetype());
    }

    // optional string schemaName = 8;
    if (has_schemaname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->schemaname());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string tableName = 9;
    if (has_tablename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tablename());
    }

    // optional int64 eventLength = 10;
    if (has_eventlength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->eventlength());
    }

    // optional .com.alibaba.otter.canal.protocol.EventType eventType = 11 [default = UPDATE];
    if (has_eventtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eventtype());
    }

  }
  // repeated .com.alibaba.otter.canal.protocol.Pair props = 12;
  total_size += 1 * this->props_size();
  for (int i = 0; i < this->props_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->props(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Header* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Header*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
  GOOGLE_CHECK_NE(&from, this);
  props_.MergeFrom(from.props_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_logfilename()) {
      set_logfilename(from.logfilename());
    }
    if (from.has_logfileoffset()) {
      set_logfileoffset(from.logfileoffset());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_serverencode()) {
      set_serverencode(from.serverencode());
    }
    if (from.has_executetime()) {
      set_executetime(from.executetime());
    }
    if (from.has_sourcetype()) {
      set_sourcetype(from.sourcetype());
    }
    if (from.has_schemaname()) {
      set_schemaname(from.schemaname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tablename()) {
      set_tablename(from.tablename());
    }
    if (from.has_eventlength()) {
      set_eventlength(from.eventlength());
    }
    if (from.has_eventtype()) {
      set_eventtype(from.eventtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {

  return true;
}

void Header::Swap(Header* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(logfilename_, other->logfilename_);
    std::swap(logfileoffset_, other->logfileoffset_);
    std::swap(serverid_, other->serverid_);
    std::swap(serverencode_, other->serverencode_);
    std::swap(executetime_, other->executetime_);
    std::swap(sourcetype_, other->sourcetype_);
    std::swap(schemaname_, other->schemaname_);
    std::swap(tablename_, other->tablename_);
    std::swap(eventlength_, other->eventlength_);
    std::swap(eventtype_, other->eventtype_);
    props_.Swap(&other->props_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Header_descriptor_;
  metadata.reflection = Header_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Column::kIndexFieldNumber;
const int Column::kSqlTypeFieldNumber;
const int Column::kNameFieldNumber;
const int Column::kIsKeyFieldNumber;
const int Column::kUpdatedFieldNumber;
const int Column::kIsNullFieldNumber;
const int Column::kPropsFieldNumber;
const int Column::kValueFieldNumber;
const int Column::kLengthFieldNumber;
const int Column::kMysqlTypeFieldNumber;
#endif  // !_MSC_VER

Column::Column()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Column::InitAsDefaultInstance() {
}

Column::Column(const Column& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Column::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  sqltype_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iskey_ = false;
  updated_ = false;
  isnull_ = false;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  length_ = 0;
  mysqltype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Column::~Column() {
  SharedDtor();
}

void Column::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (mysqltype_ != &::google::protobuf::internal::kEmptyString) {
    delete mysqltype_;
  }
  if (this != default_instance_) {
  }
}

void Column::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Column::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Column_descriptor_;
}

const Column& Column::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EntryProtocol_2eproto();
  return *default_instance_;
}

Column* Column::default_instance_ = NULL;

Column* Column::New() const {
  return new Column;
}

void Column::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    sqltype_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    iskey_ = false;
    updated_ = false;
    isnull_ = false;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    length_ = 0;
    if (has_mysqltype()) {
      if (mysqltype_ != &::google::protobuf::internal::kEmptyString) {
        mysqltype_->clear();
      }
    }
  }
  props_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Column::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sqlType;
        break;
      }

      // optional int32 sqlType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sqlType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sqltype_)));
          set_has_sqltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isKey;
        break;
      }

      // optional bool isKey = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isKey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iskey_)));
          set_has_iskey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_updated;
        break;
      }

      // optional bool updated = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_updated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &updated_)));
          set_has_updated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isNull;
        break;
      }

      // optional bool isNull = 6 [default = false];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isNull:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnull_)));
          set_has_isnull();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_props;
        break;
      }

      // repeated .com.alibaba.otter.canal.protocol.Pair props = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_props:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_props()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_props;
        if (input->ExpectTag(66)) goto parse_value;
        break;
      }

      // optional string value = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_length;
        break;
      }

      // optional int32 length = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_mysqlType;
        break;
      }

      // optional string mysqlType = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mysqlType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mysqltype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mysqltype().data(), this->mysqltype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Column::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional int32 sqlType = 2;
  if (has_sqltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sqltype(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional bool isKey = 4;
  if (has_iskey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->iskey(), output);
  }

  // optional bool updated = 5;
  if (has_updated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->updated(), output);
  }

  // optional bool isNull = 6 [default = false];
  if (has_isnull()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isnull(), output);
  }

  // repeated .com.alibaba.otter.canal.protocol.Pair props = 7;
  for (int i = 0; i < this->props_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->props(i), output);
  }

  // optional string value = 8;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->value(), output);
  }

  // optional int32 length = 9;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->length(), output);
  }

  // optional string mysqlType = 10;
  if (has_mysqltype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mysqltype().data(), this->mysqltype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->mysqltype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Column::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional int32 sqlType = 2;
  if (has_sqltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sqltype(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional bool isKey = 4;
  if (has_iskey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->iskey(), target);
  }

  // optional bool updated = 5;
  if (has_updated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->updated(), target);
  }

  // optional bool isNull = 6 [default = false];
  if (has_isnull()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isnull(), target);
  }

  // repeated .com.alibaba.otter.canal.protocol.Pair props = 7;
  for (int i = 0; i < this->props_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->props(i), target);
  }

  // optional string value = 8;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->value(), target);
  }

  // optional int32 length = 9;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->length(), target);
  }

  // optional string mysqlType = 10;
  if (has_mysqltype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mysqltype().data(), this->mysqltype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->mysqltype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Column::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 sqlType = 2;
    if (has_sqltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sqltype());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool isKey = 4;
    if (has_iskey()) {
      total_size += 1 + 1;
    }

    // optional bool updated = 5;
    if (has_updated()) {
      total_size += 1 + 1;
    }

    // optional bool isNull = 6 [default = false];
    if (has_isnull()) {
      total_size += 1 + 1;
    }

    // optional string value = 8;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 length = 9;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }

    // optional string mysqlType = 10;
    if (has_mysqltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mysqltype());
    }

  }
  // repeated .com.alibaba.otter.canal.protocol.Pair props = 7;
  total_size += 1 * this->props_size();
  for (int i = 0; i < this->props_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->props(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Column::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Column* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Column*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Column::MergeFrom(const Column& from) {
  GOOGLE_CHECK_NE(&from, this);
  props_.MergeFrom(from.props_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_sqltype()) {
      set_sqltype(from.sqltype());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_iskey()) {
      set_iskey(from.iskey());
    }
    if (from.has_updated()) {
      set_updated(from.updated());
    }
    if (from.has_isnull()) {
      set_isnull(from.isnull());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_mysqltype()) {
      set_mysqltype(from.mysqltype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Column::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Column::CopyFrom(const Column& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Column::IsInitialized() const {

  return true;
}

void Column::Swap(Column* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(sqltype_, other->sqltype_);
    std::swap(name_, other->name_);
    std::swap(iskey_, other->iskey_);
    std::swap(updated_, other->updated_);
    std::swap(isnull_, other->isnull_);
    props_.Swap(&other->props_);
    std::swap(value_, other->value_);
    std::swap(length_, other->length_);
    std::swap(mysqltype_, other->mysqltype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Column::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Column_descriptor_;
  metadata.reflection = Column_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RowData::kBeforeColumnsFieldNumber;
const int RowData::kAfterColumnsFieldNumber;
const int RowData::kPropsFieldNumber;
#endif  // !_MSC_VER

RowData::RowData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RowData::InitAsDefaultInstance() {
}

RowData::RowData(const RowData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RowData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RowData::~RowData() {
  SharedDtor();
}

void RowData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RowData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RowData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RowData_descriptor_;
}

const RowData& RowData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EntryProtocol_2eproto();
  return *default_instance_;
}

RowData* RowData::default_instance_ = NULL;

RowData* RowData::New() const {
  return new RowData;
}

void RowData::Clear() {
  beforecolumns_.Clear();
  aftercolumns_.Clear();
  props_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RowData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.alibaba.otter.canal.protocol.Column beforeColumns = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beforeColumns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_beforecolumns()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_beforeColumns;
        if (input->ExpectTag(18)) goto parse_afterColumns;
        break;
      }

      // repeated .com.alibaba.otter.canal.protocol.Column afterColumns = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_afterColumns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_aftercolumns()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_afterColumns;
        if (input->ExpectTag(26)) goto parse_props;
        break;
      }

      // repeated .com.alibaba.otter.canal.protocol.Pair props = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_props:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_props()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_props;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RowData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.alibaba.otter.canal.protocol.Column beforeColumns = 1;
  for (int i = 0; i < this->beforecolumns_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->beforecolumns(i), output);
  }

  // repeated .com.alibaba.otter.canal.protocol.Column afterColumns = 2;
  for (int i = 0; i < this->aftercolumns_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->aftercolumns(i), output);
  }

  // repeated .com.alibaba.otter.canal.protocol.Pair props = 3;
  for (int i = 0; i < this->props_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->props(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RowData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.alibaba.otter.canal.protocol.Column beforeColumns = 1;
  for (int i = 0; i < this->beforecolumns_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->beforecolumns(i), target);
  }

  // repeated .com.alibaba.otter.canal.protocol.Column afterColumns = 2;
  for (int i = 0; i < this->aftercolumns_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->aftercolumns(i), target);
  }

  // repeated .com.alibaba.otter.canal.protocol.Pair props = 3;
  for (int i = 0; i < this->props_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->props(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RowData::ByteSize() const {
  int total_size = 0;

  // repeated .com.alibaba.otter.canal.protocol.Column beforeColumns = 1;
  total_size += 1 * this->beforecolumns_size();
  for (int i = 0; i < this->beforecolumns_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->beforecolumns(i));
  }

  // repeated .com.alibaba.otter.canal.protocol.Column afterColumns = 2;
  total_size += 1 * this->aftercolumns_size();
  for (int i = 0; i < this->aftercolumns_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->aftercolumns(i));
  }

  // repeated .com.alibaba.otter.canal.protocol.Pair props = 3;
  total_size += 1 * this->props_size();
  for (int i = 0; i < this->props_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->props(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RowData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RowData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RowData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RowData::MergeFrom(const RowData& from) {
  GOOGLE_CHECK_NE(&from, this);
  beforecolumns_.MergeFrom(from.beforecolumns_);
  aftercolumns_.MergeFrom(from.aftercolumns_);
  props_.MergeFrom(from.props_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RowData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RowData::CopyFrom(const RowData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RowData::IsInitialized() const {

  return true;
}

void RowData::Swap(RowData* other) {
  if (other != this) {
    beforecolumns_.Swap(&other->beforecolumns_);
    aftercolumns_.Swap(&other->aftercolumns_);
    props_.Swap(&other->props_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RowData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RowData_descriptor_;
  metadata.reflection = RowData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RowChange::kTableIdFieldNumber;
const int RowChange::kEventTypeFieldNumber;
const int RowChange::kIsDdlFieldNumber;
const int RowChange::kSqlFieldNumber;
const int RowChange::kRowDatasFieldNumber;
const int RowChange::kPropsFieldNumber;
const int RowChange::kDdlSchemaNameFieldNumber;
#endif  // !_MSC_VER

RowChange::RowChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RowChange::InitAsDefaultInstance() {
}

RowChange::RowChange(const RowChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RowChange::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = GOOGLE_LONGLONG(0);
  eventtype_ = 2;
  isddl_ = false;
  sql_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ddlschemaname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RowChange::~RowChange() {
  SharedDtor();
}

void RowChange::SharedDtor() {
  if (sql_ != &::google::protobuf::internal::kEmptyString) {
    delete sql_;
  }
  if (ddlschemaname_ != &::google::protobuf::internal::kEmptyString) {
    delete ddlschemaname_;
  }
  if (this != default_instance_) {
  }
}

void RowChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RowChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RowChange_descriptor_;
}

const RowChange& RowChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EntryProtocol_2eproto();
  return *default_instance_;
}

RowChange* RowChange::default_instance_ = NULL;

RowChange* RowChange::New() const {
  return new RowChange;
}

void RowChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = GOOGLE_LONGLONG(0);
    eventtype_ = 2;
    isddl_ = false;
    if (has_sql()) {
      if (sql_ != &::google::protobuf::internal::kEmptyString) {
        sql_->clear();
      }
    }
    if (has_ddlschemaname()) {
      if (ddlschemaname_ != &::google::protobuf::internal::kEmptyString) {
        ddlschemaname_->clear();
      }
    }
  }
  rowdatas_.Clear();
  props_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RowChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 tableId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eventType;
        break;
      }

      // optional .com.alibaba.otter.canal.protocol.EventType eventType = 2 [default = UPDATE];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eventType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::alibaba::otter::canal::protocol::EventType_IsValid(value)) {
            set_eventtype(static_cast< ::com::alibaba::otter::canal::protocol::EventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_isDdl;
        break;
      }

      // optional bool isDdl = 10 [default = false];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isDdl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isddl_)));
          set_has_isddl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_sql;
        break;
      }

      // optional string sql = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sql:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sql()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sql().data(), this->sql().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_rowDatas;
        break;
      }

      // repeated .com.alibaba.otter.canal.protocol.RowData rowDatas = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rowDatas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rowdatas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_rowDatas;
        if (input->ExpectTag(106)) goto parse_props;
        break;
      }

      // repeated .com.alibaba.otter.canal.protocol.Pair props = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_props:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_props()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_props;
        if (input->ExpectTag(114)) goto parse_ddlSchemaName;
        break;
      }

      // optional string ddlSchemaName = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ddlSchemaName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ddlschemaname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ddlschemaname().data(), this->ddlschemaname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RowChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 tableId = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->tableid(), output);
  }

  // optional .com.alibaba.otter.canal.protocol.EventType eventType = 2 [default = UPDATE];
  if (has_eventtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->eventtype(), output);
  }

  // optional bool isDdl = 10 [default = false];
  if (has_isddl()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->isddl(), output);
  }

  // optional string sql = 11;
  if (has_sql()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sql().data(), this->sql().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->sql(), output);
  }

  // repeated .com.alibaba.otter.canal.protocol.RowData rowDatas = 12;
  for (int i = 0; i < this->rowdatas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->rowdatas(i), output);
  }

  // repeated .com.alibaba.otter.canal.protocol.Pair props = 13;
  for (int i = 0; i < this->props_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->props(i), output);
  }

  // optional string ddlSchemaName = 14;
  if (has_ddlschemaname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ddlschemaname().data(), this->ddlschemaname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->ddlschemaname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RowChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 tableId = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->tableid(), target);
  }

  // optional .com.alibaba.otter.canal.protocol.EventType eventType = 2 [default = UPDATE];
  if (has_eventtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->eventtype(), target);
  }

  // optional bool isDdl = 10 [default = false];
  if (has_isddl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->isddl(), target);
  }

  // optional string sql = 11;
  if (has_sql()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sql().data(), this->sql().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->sql(), target);
  }

  // repeated .com.alibaba.otter.canal.protocol.RowData rowDatas = 12;
  for (int i = 0; i < this->rowdatas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->rowdatas(i), target);
  }

  // repeated .com.alibaba.otter.canal.protocol.Pair props = 13;
  for (int i = 0; i < this->props_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->props(i), target);
  }

  // optional string ddlSchemaName = 14;
  if (has_ddlschemaname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ddlschemaname().data(), this->ddlschemaname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->ddlschemaname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RowChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 tableId = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tableid());
    }

    // optional .com.alibaba.otter.canal.protocol.EventType eventType = 2 [default = UPDATE];
    if (has_eventtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eventtype());
    }

    // optional bool isDdl = 10 [default = false];
    if (has_isddl()) {
      total_size += 1 + 1;
    }

    // optional string sql = 11;
    if (has_sql()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sql());
    }

    // optional string ddlSchemaName = 14;
    if (has_ddlschemaname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ddlschemaname());
    }

  }
  // repeated .com.alibaba.otter.canal.protocol.RowData rowDatas = 12;
  total_size += 1 * this->rowdatas_size();
  for (int i = 0; i < this->rowdatas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rowdatas(i));
  }

  // repeated .com.alibaba.otter.canal.protocol.Pair props = 13;
  total_size += 1 * this->props_size();
  for (int i = 0; i < this->props_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->props(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RowChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RowChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RowChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RowChange::MergeFrom(const RowChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  rowdatas_.MergeFrom(from.rowdatas_);
  props_.MergeFrom(from.props_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_eventtype()) {
      set_eventtype(from.eventtype());
    }
    if (from.has_isddl()) {
      set_isddl(from.isddl());
    }
    if (from.has_sql()) {
      set_sql(from.sql());
    }
    if (from.has_ddlschemaname()) {
      set_ddlschemaname(from.ddlschemaname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RowChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RowChange::CopyFrom(const RowChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RowChange::IsInitialized() const {

  return true;
}

void RowChange::Swap(RowChange* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(eventtype_, other->eventtype_);
    std::swap(isddl_, other->isddl_);
    std::swap(sql_, other->sql_);
    rowdatas_.Swap(&other->rowdatas_);
    props_.Swap(&other->props_);
    std::swap(ddlschemaname_, other->ddlschemaname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RowChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RowChange_descriptor_;
  metadata.reflection = RowChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransactionBegin::kExecuteTimeFieldNumber;
const int TransactionBegin::kTransactionIdFieldNumber;
const int TransactionBegin::kPropsFieldNumber;
const int TransactionBegin::kThreadIdFieldNumber;
#endif  // !_MSC_VER

TransactionBegin::TransactionBegin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransactionBegin::InitAsDefaultInstance() {
}

TransactionBegin::TransactionBegin(const TransactionBegin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransactionBegin::SharedCtor() {
  _cached_size_ = 0;
  executetime_ = GOOGLE_LONGLONG(0);
  transactionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  threadid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionBegin::~TransactionBegin() {
  SharedDtor();
}

void TransactionBegin::SharedDtor() {
  if (transactionid_ != &::google::protobuf::internal::kEmptyString) {
    delete transactionid_;
  }
  if (this != default_instance_) {
  }
}

void TransactionBegin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionBegin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionBegin_descriptor_;
}

const TransactionBegin& TransactionBegin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EntryProtocol_2eproto();
  return *default_instance_;
}

TransactionBegin* TransactionBegin::default_instance_ = NULL;

TransactionBegin* TransactionBegin::New() const {
  return new TransactionBegin;
}

void TransactionBegin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    executetime_ = GOOGLE_LONGLONG(0);
    if (has_transactionid()) {
      if (transactionid_ != &::google::protobuf::internal::kEmptyString) {
        transactionid_->clear();
      }
    }
    threadid_ = GOOGLE_LONGLONG(0);
  }
  props_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransactionBegin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 executeTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &executetime_)));
          set_has_executetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_transactionId;
        break;
      }

      // optional string transactionId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transactionId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transactionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->transactionid().data(), this->transactionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_props;
        break;
      }

      // repeated .com.alibaba.otter.canal.protocol.Pair props = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_props:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_props()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_props;
        if (input->ExpectTag(32)) goto parse_threadId;
        break;
      }

      // optional int64 threadId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_threadId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &threadid_)));
          set_has_threadid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransactionBegin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 executeTime = 1;
  if (has_executetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->executetime(), output);
  }

  // optional string transactionId = 2;
  if (has_transactionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transactionid().data(), this->transactionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->transactionid(), output);
  }

  // repeated .com.alibaba.otter.canal.protocol.Pair props = 3;
  for (int i = 0; i < this->props_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->props(i), output);
  }

  // optional int64 threadId = 4;
  if (has_threadid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->threadid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransactionBegin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 executeTime = 1;
  if (has_executetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->executetime(), target);
  }

  // optional string transactionId = 2;
  if (has_transactionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transactionid().data(), this->transactionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->transactionid(), target);
  }

  // repeated .com.alibaba.otter.canal.protocol.Pair props = 3;
  for (int i = 0; i < this->props_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->props(i), target);
  }

  // optional int64 threadId = 4;
  if (has_threadid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->threadid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransactionBegin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 executeTime = 1;
    if (has_executetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->executetime());
    }

    // optional string transactionId = 2;
    if (has_transactionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->transactionid());
    }

    // optional int64 threadId = 4;
    if (has_threadid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->threadid());
    }

  }
  // repeated .com.alibaba.otter.canal.protocol.Pair props = 3;
  total_size += 1 * this->props_size();
  for (int i = 0; i < this->props_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->props(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionBegin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransactionBegin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransactionBegin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionBegin::MergeFrom(const TransactionBegin& from) {
  GOOGLE_CHECK_NE(&from, this);
  props_.MergeFrom(from.props_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_executetime()) {
      set_executetime(from.executetime());
    }
    if (from.has_transactionid()) {
      set_transactionid(from.transactionid());
    }
    if (from.has_threadid()) {
      set_threadid(from.threadid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransactionBegin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionBegin::CopyFrom(const TransactionBegin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionBegin::IsInitialized() const {

  return true;
}

void TransactionBegin::Swap(TransactionBegin* other) {
  if (other != this) {
    std::swap(executetime_, other->executetime_);
    std::swap(transactionid_, other->transactionid_);
    props_.Swap(&other->props_);
    std::swap(threadid_, other->threadid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransactionBegin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionBegin_descriptor_;
  metadata.reflection = TransactionBegin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransactionEnd::kExecuteTimeFieldNumber;
const int TransactionEnd::kTransactionIdFieldNumber;
const int TransactionEnd::kPropsFieldNumber;
#endif  // !_MSC_VER

TransactionEnd::TransactionEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransactionEnd::InitAsDefaultInstance() {
}

TransactionEnd::TransactionEnd(const TransactionEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransactionEnd::SharedCtor() {
  _cached_size_ = 0;
  executetime_ = GOOGLE_LONGLONG(0);
  transactionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionEnd::~TransactionEnd() {
  SharedDtor();
}

void TransactionEnd::SharedDtor() {
  if (transactionid_ != &::google::protobuf::internal::kEmptyString) {
    delete transactionid_;
  }
  if (this != default_instance_) {
  }
}

void TransactionEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionEnd_descriptor_;
}

const TransactionEnd& TransactionEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EntryProtocol_2eproto();
  return *default_instance_;
}

TransactionEnd* TransactionEnd::default_instance_ = NULL;

TransactionEnd* TransactionEnd::New() const {
  return new TransactionEnd;
}

void TransactionEnd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    executetime_ = GOOGLE_LONGLONG(0);
    if (has_transactionid()) {
      if (transactionid_ != &::google::protobuf::internal::kEmptyString) {
        transactionid_->clear();
      }
    }
  }
  props_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransactionEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 executeTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &executetime_)));
          set_has_executetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_transactionId;
        break;
      }

      // optional string transactionId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transactionId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transactionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->transactionid().data(), this->transactionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_props;
        break;
      }

      // repeated .com.alibaba.otter.canal.protocol.Pair props = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_props:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_props()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_props;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransactionEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 executeTime = 1;
  if (has_executetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->executetime(), output);
  }

  // optional string transactionId = 2;
  if (has_transactionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transactionid().data(), this->transactionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->transactionid(), output);
  }

  // repeated .com.alibaba.otter.canal.protocol.Pair props = 3;
  for (int i = 0; i < this->props_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->props(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransactionEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 executeTime = 1;
  if (has_executetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->executetime(), target);
  }

  // optional string transactionId = 2;
  if (has_transactionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transactionid().data(), this->transactionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->transactionid(), target);
  }

  // repeated .com.alibaba.otter.canal.protocol.Pair props = 3;
  for (int i = 0; i < this->props_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->props(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransactionEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 executeTime = 1;
    if (has_executetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->executetime());
    }

    // optional string transactionId = 2;
    if (has_transactionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->transactionid());
    }

  }
  // repeated .com.alibaba.otter.canal.protocol.Pair props = 3;
  total_size += 1 * this->props_size();
  for (int i = 0; i < this->props_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->props(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransactionEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransactionEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionEnd::MergeFrom(const TransactionEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  props_.MergeFrom(from.props_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_executetime()) {
      set_executetime(from.executetime());
    }
    if (from.has_transactionid()) {
      set_transactionid(from.transactionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransactionEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionEnd::CopyFrom(const TransactionEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionEnd::IsInitialized() const {

  return true;
}

void TransactionEnd::Swap(TransactionEnd* other) {
  if (other != this) {
    std::swap(executetime_, other->executetime_);
    std::swap(transactionid_, other->transactionid_);
    props_.Swap(&other->props_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransactionEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionEnd_descriptor_;
  metadata.reflection = TransactionEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pair::kKeyFieldNumber;
const int Pair::kValueFieldNumber;
#endif  // !_MSC_VER

Pair::Pair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pair::InitAsDefaultInstance() {
}

Pair::Pair(const Pair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pair::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pair::~Pair() {
  SharedDtor();
}

void Pair::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void Pair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pair_descriptor_;
}

const Pair& Pair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EntryProtocol_2eproto();
  return *default_instance_;
}

Pair* Pair::default_instance_ = NULL;

Pair* Pair::New() const {
  return new Pair;
}

void Pair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pair::MergeFrom(const Pair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pair::CopyFrom(const Pair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pair::IsInitialized() const {

  return true;
}

void Pair::Swap(Pair* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pair_descriptor_;
  metadata.reflection = Pair_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace canal
}  // namespace otter
}  // namespace alibaba
}  // namespace com

// @@protoc_insertion_point(global_scope)
